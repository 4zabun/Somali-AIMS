// <auto-generated />
using System;
using AIMS.DAL.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AIMS.DAL.Migrations
{
    [DbContext(typeof(AIMSDbContext))]
    [Migration("20201204055323_Added_Notified_to_ContactMessages")]
    partial class Added_Notified_to_ContactMessages
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AIMS.Models.EFContactMessages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Dated")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmailType")
                        .HasColumnType("int");

                    b.Property<bool>("IsNotified")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("SenderEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ContactMessages");
                });

            modelBuilder.Entity("AIMS.Models.EFCurrency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CurrencyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNational")
                        .HasColumnType("bit");

                    b.Property<int?>("Source")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Currency")
                        .IsUnique()
                        .HasFilter("[Currency] IS NOT NULL");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("AIMS.Models.EFDocumentLinks", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DatePosted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DocumentLinks");
                });

            modelBuilder.Entity("AIMS.Models.EFDropboxSettings", b =>
                {
                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Token");

                    b.ToTable("DropboxSettings");
                });

            modelBuilder.Entity("AIMS.Models.EFEmailMessages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FooterMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<int>("MessageType")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("TypeDefinition")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("EmailMessages");
                });

            modelBuilder.Entity("AIMS.Models.EFEnvelope", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ExchangeRate")
                        .HasColumnType("decimal(9, 2)");

                    b.Property<int>("FunderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FunderId");

                    b.ToTable("Envelope");
                });

            modelBuilder.Entity("AIMS.Models.EFEnvelopeTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("EnvelopeTypes");
                });

            modelBuilder.Entity("AIMS.Models.EFEnvelopeYearlyBreakup", b =>
                {
                    b.Property<int>("EnvelopeTypeId")
                        .HasColumnType("int");

                    b.Property<int>("EnvelopeId")
                        .HasColumnType("int");

                    b.Property<int>("YearId")
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("EnvelopeTypeId", "EnvelopeId", "YearId");

                    b.HasIndex("EnvelopeId");

                    b.HasIndex("YearId");

                    b.ToTable("EnvelopeYearlyBreakups");
                });

            modelBuilder.Entity("AIMS.Models.EFExchangeRates", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Dated")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExchangeRatesJson")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ExchangeRates");
                });

            modelBuilder.Entity("AIMS.Models.EFExchangeRatesAPIsCount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<DateTime>("Dated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ExchangeRatesAPIsCount");
                });

            modelBuilder.Entity("AIMS.Models.EFExchangeRatesSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("APIKeyOpenExchangeRates")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FinancialYearEndingMonth")
                        .HasColumnType("int");

                    b.Property<int>("FinancialYearStartingMonth")
                        .HasColumnType("int");

                    b.Property<string>("ManualExchangeRateSource")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ManualExchangeRates")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ExchangeRatesSettings");
                });

            modelBuilder.Entity("AIMS.Models.EFExchangeRatesUsageSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("Source")
                        .HasColumnType("int");

                    b.Property<int>("UsageSection")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Source", "UsageSection")
                        .IsUnique();

                    b.ToTable("ExchangeRatesUsageSettings");
                });

            modelBuilder.Entity("AIMS.Models.EFFinancialYearSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Day")
                        .HasColumnType("int");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("FinancialYearSettings");
                });

            modelBuilder.Entity("AIMS.Models.EFFinancialYearTransition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AppliedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("AppliedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAutomated")
                        .HasColumnType("bit");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppliedById");

                    b.ToTable("FinancialTransitions");
                });

            modelBuilder.Entity("AIMS.Models.EFFinancialYears", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FinancialYear")
                        .HasColumnType("int");

                    b.Property<string>("Label")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FinancialYear")
                        .IsUnique();

                    b.ToTable("FinancialYears");
                });

            modelBuilder.Entity("AIMS.Models.EFFundingTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FundingType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FundingTypes");
                });

            modelBuilder.Entity("AIMS.Models.EFHelp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Entity")
                        .HasColumnType("int");

                    b.Property<string>("HelpInfoJson")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Help");
                });

            modelBuilder.Entity("AIMS.Models.EFHomePageSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AIMSTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AIMSTitleBarText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FaviconPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IntroductionHeading")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IntroductionText")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("HomePageSettings");
                });

            modelBuilder.Entity("AIMS.Models.EFIATICountryCodes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("IATICountryCodes");
                });

            modelBuilder.Entity("AIMS.Models.EFIATIData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Data")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Dated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Organizations")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("IATIData");
                });

            modelBuilder.Entity("AIMS.Models.EFIATIOrganization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("OrganizationName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("IATIOrganizations");
                });

            modelBuilder.Entity("AIMS.Models.EFIATISettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BaseUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionTypesJson")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("IATISettings");
                });

            modelBuilder.Entity("AIMS.Models.EFLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsUnAttributed")
                        .HasColumnType("bit");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("decimal(9, 5)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("decimal(9, 5)");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("AIMS.Models.EFLogs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActionPerformed")
                        .HasColumnType("int");

                    b.Property<DateTime>("Dated")
                        .HasColumnType("datetime2");

                    b.Property<string>("NewValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("AIMS.Models.EFManualExchangeRates", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DefaultCurrency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ExchangeRate")
                        .HasColumnType("decimal(9, 2)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ManualExchangeRates");
                });

            modelBuilder.Entity("AIMS.Models.EFMarkers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FieldTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FieldType")
                        .HasColumnType("int");

                    b.Property<string>("Help")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Values")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Markers");
                });

            modelBuilder.Entity("AIMS.Models.EFOrganization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUnAffiliated")
                        .HasColumnType("bit");

                    b.Property<string>("OrganizationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrganizationTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationTypeId");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("AIMS.Models.EFOrganizationMergeRequests", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Dated")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EnvelopeOrganizationId")
                        .HasColumnType("int");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<string>("NewName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganizationIdsJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrganizationTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("RequestedById")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EnvelopeOrganizationId");

                    b.HasIndex("RequestedById");

                    b.ToTable("OrganizationMergeRequests");
                });

            modelBuilder.Entity("AIMS.Models.EFOrganizationTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsUnAffiliated")
                        .HasColumnType("bit");

                    b.Property<string>("TypeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OrganizationTypes");
                });

            modelBuilder.Entity("AIMS.Models.EFOrganizationsToMerge", b =>
                {
                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.HasKey("RequestId", "OrganizationId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("OrganizationsToMerge");
                });

            modelBuilder.Entity("AIMS.Models.EFPasswordRecoveryRequests", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Dated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PasswordRecoveryRequests");
                });

            modelBuilder.Entity("AIMS.Models.EFProject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EndingFinancialYearId")
                        .HasColumnType("int");

                    b.Property<decimal>("ExchangeRate")
                        .HasColumnType("decimal(9, 2)");

                    b.Property<int>("FundingTypeId")
                        .HasColumnType("int");

                    b.Property<string>("ProjectCurrency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ProjectValue")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("StartingFinancialYearId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EndingFinancialYearId");

                    b.HasIndex("FundingTypeId");

                    b.HasIndex("StartingFinancialYearId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("AIMS.Models.EFProjectDeletionRequests", b =>
                {
                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("RequestedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("RequestedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("StatusUpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("ProjectId", "RequestedById");

                    b.HasIndex("RequestedById");

                    b.ToTable("ProjectDeletionRequests");
                });

            modelBuilder.Entity("AIMS.Models.EFProjectDisbursements", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("DisbursementType")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("ExchangeRate")
                        .HasColumnType("decimal(9, 2)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("YearId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("YearId");

                    b.HasIndex("ProjectId", "YearId", "DisbursementType")
                        .IsUnique();

                    b.ToTable("ProjectDisbursements");
                });

            modelBuilder.Entity("AIMS.Models.EFProjectDocuments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DocumentTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectDocuments");
                });

            modelBuilder.Entity("AIMS.Models.EFProjectFunders", b =>
                {
                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("FunderId")
                        .HasColumnType("int");

                    b.HasKey("ProjectId", "FunderId");

                    b.HasIndex("FunderId");

                    b.ToTable("ProjectFunders");
                });

            modelBuilder.Entity("AIMS.Models.EFProjectImplementers", b =>
                {
                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("ImplementerId")
                        .HasColumnType("int");

                    b.HasKey("ProjectId", "ImplementerId");

                    b.HasIndex("ImplementerId");

                    b.ToTable("ProjectImplementers");
                });

            modelBuilder.Entity("AIMS.Models.EFProjectLocations", b =>
                {
                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<decimal>("FundsPercentage")
                        .HasColumnType("decimal(9, 2)");

                    b.HasKey("ProjectId", "LocationId");

                    b.HasIndex("LocationId");

                    b.ToTable("ProjectLocations");
                });

            modelBuilder.Entity("AIMS.Models.EFProjectMarkers", b =>
                {
                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("MarkerId")
                        .HasColumnType("int");

                    b.Property<int>("FieldType")
                        .HasColumnType("int");

                    b.Property<string>("Values")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProjectId", "MarkerId");

                    b.HasIndex("MarkerId");

                    b.ToTable("ProjectMarkers");
                });

            modelBuilder.Entity("AIMS.Models.EFProjectMembershipRequests", b =>
                {
                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("MembershipType")
                        .HasColumnType("int");

                    b.Property<DateTime>("Dated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int");

                    b.HasKey("ProjectId", "UserId", "MembershipType");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("UserId");

                    b.ToTable("ProjectMembershipRequests");
                });

            modelBuilder.Entity("AIMS.Models.EFProjectSectors", b =>
                {
                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("SectorId")
                        .HasColumnType("int");

                    b.Property<decimal>("FundsPercentage")
                        .HasColumnType("decimal(9, 2)");

                    b.HasKey("ProjectId", "SectorId");

                    b.HasIndex("SectorId");

                    b.ToTable("ProjectSectors");
                });

            modelBuilder.Entity("AIMS.Models.EFReportSubscriptions", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("ReportId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "ReportId");

                    b.HasIndex("ReportId");

                    b.ToTable("ReportSubscriptions");
                });

            modelBuilder.Entity("AIMS.Models.EFSMTPSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdminEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Host")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Port")
                        .HasColumnType("int");

                    b.Property<string>("SenderName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SMTPSettings");
                });

            modelBuilder.Entity("AIMS.Models.EFSector", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("IATICode")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<bool>("IsUnAttributed")
                        .HasColumnType("bit");

                    b.Property<int?>("ParentSectorId")
                        .HasColumnType("int");

                    b.Property<string>("SectorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SectorTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ParentSectorId");

                    b.HasIndex("SectorTypeId");

                    b.ToTable("Sectors");
                });

            modelBuilder.Entity("AIMS.Models.EFSectorMappings", b =>
                {
                    b.Property<int>("SectorId")
                        .HasColumnType("int");

                    b.Property<int>("MappedSectorId")
                        .HasColumnType("int");

                    b.Property<int>("SectorTypeId")
                        .HasColumnType("int");

                    b.HasKey("SectorId", "MappedSectorId");

                    b.ToTable("SectorMappings");
                });

            modelBuilder.Entity("AIMS.Models.EFSectorTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("IATICode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsPrimary")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSourceType")
                        .HasColumnType("bit");

                    b.Property<string>("SourceUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SectorTypes");
                });

            modelBuilder.Entity("AIMS.Models.EFStaticReports", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StaticReports");
                });

            modelBuilder.Entity("AIMS.Models.EFUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ApprovedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUnAffiliated")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("AIMS.Models.EFUserNotifications", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Dated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsSeen")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NotificationType")
                        .HasColumnType("int");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<int>("TreatmentId")
                        .HasColumnType("int");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("UserNotifications");
                });

            modelBuilder.Entity("AIMS.Models.EFUserRoleSettlementRequests", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Dated")
                        .HasColumnType("datetime2");

                    b.Property<int>("RequestedUserType")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoleSettlementRequests");
                });

            modelBuilder.Entity("AIMS.Models.EFContactMessages", b =>
                {
                    b.HasOne("AIMS.Models.EFProject", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AIMS.Models.EFEnvelope", b =>
                {
                    b.HasOne("AIMS.Models.EFOrganization", "Funder")
                        .WithMany()
                        .HasForeignKey("FunderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AIMS.Models.EFEnvelopeYearlyBreakup", b =>
                {
                    b.HasOne("AIMS.Models.EFEnvelope", "Envelope")
                        .WithMany()
                        .HasForeignKey("EnvelopeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AIMS.Models.EFEnvelopeTypes", "EnvelopeType")
                        .WithMany()
                        .HasForeignKey("EnvelopeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AIMS.Models.EFFinancialYears", "Year")
                        .WithMany()
                        .HasForeignKey("YearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AIMS.Models.EFFinancialYearTransition", b =>
                {
                    b.HasOne("AIMS.Models.EFUser", "AppliedBy")
                        .WithMany()
                        .HasForeignKey("AppliedById");
                });

            modelBuilder.Entity("AIMS.Models.EFLogs", b =>
                {
                    b.HasOne("AIMS.Models.EFProject", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AIMS.Models.EFUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("AIMS.Models.EFOrganization", b =>
                {
                    b.HasOne("AIMS.Models.EFOrganizationTypes", "OrganizationType")
                        .WithMany()
                        .HasForeignKey("OrganizationTypeId");
                });

            modelBuilder.Entity("AIMS.Models.EFOrganizationMergeRequests", b =>
                {
                    b.HasOne("AIMS.Models.EFOrganization", "EnvelopeOrganization")
                        .WithMany()
                        .HasForeignKey("EnvelopeOrganizationId");

                    b.HasOne("AIMS.Models.EFUser", "RequestedBy")
                        .WithMany()
                        .HasForeignKey("RequestedById");
                });

            modelBuilder.Entity("AIMS.Models.EFOrganizationsToMerge", b =>
                {
                    b.HasOne("AIMS.Models.EFOrganization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AIMS.Models.EFOrganizationMergeRequests", "Request")
                        .WithMany("Organizations")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AIMS.Models.EFProject", b =>
                {
                    b.HasOne("AIMS.Models.EFUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("AIMS.Models.EFFinancialYears", "EndingFinancialYear")
                        .WithMany()
                        .HasForeignKey("EndingFinancialYearId");

                    b.HasOne("AIMS.Models.EFFundingTypes", "FundingType")
                        .WithMany()
                        .HasForeignKey("FundingTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AIMS.Models.EFFinancialYears", "StartingFinancialYear")
                        .WithMany()
                        .HasForeignKey("StartingFinancialYearId");
                });

            modelBuilder.Entity("AIMS.Models.EFProjectDeletionRequests", b =>
                {
                    b.HasOne("AIMS.Models.EFProject", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AIMS.Models.EFUser", "RequestedBy")
                        .WithMany()
                        .HasForeignKey("RequestedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AIMS.Models.EFProjectDisbursements", b =>
                {
                    b.HasOne("AIMS.Models.EFProject", "Project")
                        .WithMany("Disbursements")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AIMS.Models.EFFinancialYears", "Year")
                        .WithMany()
                        .HasForeignKey("YearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AIMS.Models.EFProjectDocuments", b =>
                {
                    b.HasOne("AIMS.Models.EFProject", "Project")
                        .WithMany("Documents")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AIMS.Models.EFProjectFunders", b =>
                {
                    b.HasOne("AIMS.Models.EFOrganization", "Funder")
                        .WithMany()
                        .HasForeignKey("FunderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AIMS.Models.EFProject", "Project")
                        .WithMany("Funders")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AIMS.Models.EFProjectImplementers", b =>
                {
                    b.HasOne("AIMS.Models.EFOrganization", "Implementer")
                        .WithMany()
                        .HasForeignKey("ImplementerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AIMS.Models.EFProject", "Project")
                        .WithMany("Implementers")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AIMS.Models.EFProjectLocations", b =>
                {
                    b.HasOne("AIMS.Models.EFLocation", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AIMS.Models.EFProject", "Project")
                        .WithMany("Locations")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AIMS.Models.EFProjectMarkers", b =>
                {
                    b.HasOne("AIMS.Models.EFMarkers", "Marker")
                        .WithMany()
                        .HasForeignKey("MarkerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AIMS.Models.EFProject", "Project")
                        .WithMany("Markers")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AIMS.Models.EFProjectMembershipRequests", b =>
                {
                    b.HasOne("AIMS.Models.EFOrganization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId");

                    b.HasOne("AIMS.Models.EFProject", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AIMS.Models.EFUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AIMS.Models.EFProjectSectors", b =>
                {
                    b.HasOne("AIMS.Models.EFProject", "Project")
                        .WithMany("Sectors")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AIMS.Models.EFSector", "Sector")
                        .WithMany()
                        .HasForeignKey("SectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AIMS.Models.EFReportSubscriptions", b =>
                {
                    b.HasOne("AIMS.Models.EFStaticReports", "Report")
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AIMS.Models.EFUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AIMS.Models.EFSector", b =>
                {
                    b.HasOne("AIMS.Models.EFSector", "ParentSector")
                        .WithMany()
                        .HasForeignKey("ParentSectorId");

                    b.HasOne("AIMS.Models.EFSectorTypes", "SectorType")
                        .WithMany("Sectors")
                        .HasForeignKey("SectorTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AIMS.Models.EFUser", b =>
                {
                    b.HasOne("AIMS.Models.EFOrganization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AIMS.Models.EFUserNotifications", b =>
                {
                    b.HasOne("AIMS.Models.EFOrganization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId");
                });

            modelBuilder.Entity("AIMS.Models.EFUserRoleSettlementRequests", b =>
                {
                    b.HasOne("AIMS.Models.EFUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
